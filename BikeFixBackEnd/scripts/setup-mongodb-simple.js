/**
 * Script Simples para Configurar MongoDB Atlas - BikeFix
 * 
 * Este script conecta ao MongoDB Atlas e configura os √≠ndices necess√°rios
 */

const mongoose = require('mongoose');
require('dotenv').config();

const MONGODB_URI = process.env.MONGODB_URI;

async function setupMongoDB() {
  try {
    console.log('üöÄ Configurando MongoDB Atlas para BikeFix');
    console.log('==================================================');
    
    // Conectar ao MongoDB
    console.log('üîå Conectando ao MongoDB Atlas...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB Atlas');
    console.log(`üìä Database: ${mongoose.connection.name}`);
    
    // Criar √≠ndices
    console.log('üîß Criando √≠ndices...');
    
    // √çndices para users
    await mongoose.connection.collection('users').createIndex({ email: 1 }, { unique: true });
    await mongoose.connection.collection('users').createIndex({ userType: 1 });
    await mongoose.connection.collection('users').createIndex({ 'workshopData.isApproved': 1 });
    console.log('‚úÖ √çndices de users criados');
    
    // √çndices para appointments
    await mongoose.connection.collection('appointments').createIndex({ cyclist: 1 });
    await mongoose.connection.collection('appointments').createIndex({ workshop: 1 });
    await mongoose.connection.collection('appointments').createIndex({ status: 1 });
    await mongoose.connection.collection('appointments').createIndex({ scheduledDate: 1 });
    console.log('‚úÖ √çndices de appointments criados');
    
    // √çndices para services
    await mongoose.connection.collection('services').createIndex({ workshop: 1 });
    await mongoose.connection.collection('services').createIndex({ isActive: 1 });
    console.log('‚úÖ √çndices de services criados');
    
    // Verificar cole√ß√µes existentes
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log('üìã Cole√ß√µes existentes:');
    collections.forEach(col => {
      console.log(`   - ${col.name}`);
    });
    
    // Contar documentos
    const userCount = await mongoose.connection.collection('users').countDocuments();
    const appointmentCount = await mongoose.connection.collection('appointments').countDocuments();
    
    console.log('üìä Estat√≠sticas:');
    console.log(`   - Usu√°rios: ${userCount}`);
    console.log(`   - Agendamentos: ${appointmentCount}`);
    
    console.log('==================================================');
    console.log('‚úÖ Configura√ß√£o do MongoDB Atlas conclu√≠da com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante configura√ß√£o:', error.message);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('üîí Conex√£o fechada');
  }
}

if (require.main === module) {
  setupMongoDB();
}

module.exports = setupMongoDB;