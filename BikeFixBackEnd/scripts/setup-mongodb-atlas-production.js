/**
 * Script para Configurar MongoDB Atlas - Produ√ß√£o BikeFix
 * 
 * Este script:
 * 1. Conecta ao MongoDB Atlas
 * 2. Configura o banco 'bikefix' como produ√ß√£o
 * 3. Migra dados da base de teste se necess√°rio
 * 4. Configura √≠ndices e valida√ß√µes
 */

const mongoose = require('mongoose');
const User = require('../models/User');
const Appointment = require('../models/Appointment');
const Service = require('../models/Service');
const Review = require('../models/Review');
const Notification = require('../models/Notification');

require('dotenv').config();

// Configura√ß√µes do MongoDB Atlas
const MONGODB_ATLAS_URI = process.env.MONGODB_ATLAS_URI || process.env.MONGODB_URI;
const MONGODB_TEST_URI = process.env.MONGODB_TEST_URI || 'mongodb://localhost:27017/bikefix';

class MongoDBAtlasSetup {
  constructor() {
    this.productionConnection = null;
    this.testConnection = null;
  }

  async connectToProduction() {
    console.log('üîå Conectando ao MongoDB Atlas (Produ√ß√£o)...');
    
    if (!MONGODB_ATLAS_URI || MONGODB_ATLAS_URI.includes('CONFIGURE')) {
      throw new Error('‚ùå MONGODB_ATLAS_URI n√£o configurada corretamente!');
    }

    // Garantir que estamos usando o banco 'bikefix'
    const atlasUri = MONGODB_ATLAS_URI.replace(/\/[^?]*\?/, '/bikefix?');
    
    this.productionConnection = await mongoose.createConnection(atlasUri);
    console.log('‚úÖ Conectado ao MongoDB Atlas - Banco: bikefix');
    
    return this.productionConnection;
  }

  async connectToTest() {
    console.log('üîå Conectando ao banco de teste...');
    this.testConnection = await mongoose.createConnection(MONGODB_TEST_URI);
    console.log('‚úÖ Conectado ao banco de teste');
    return this.testConnection;
  }

  async createProductionIndexes(connection) {
    console.log('üîß Criando √≠ndices no banco de produ√ß√£o...');
    
    try {
      const db = connection.db;
      
      // √çndices para users
      await db.collection('users').createIndex({ email: 1 }, { unique: true });
      await db.collection('users').createIndex({ userType: 1 });
      await db.collection('users').createIndex({ 'workshopData.isApproved': 1 });
      await db.collection('users').createIndex({ 'workshopData.address.coordinates': '2dsphere' });
      console.log('‚úÖ √çndices de users criados');
      
      // √çndices para appointments
      await db.collection('appointments').createIndex({ cyclist: 1 });
      await db.collection('appointments').createIndex({ workshop: 1 });
      await db.collection('appointments').createIndex({ status: 1 });
      await db.collection('appointments').createIndex({ scheduledDate: 1 });
      console.log('‚úÖ √çndices de appointments criados');
      
      // √çndices para services
      await db.collection('services').createIndex({ workshop: 1 });
      await db.collection('services').createIndex({ isActive: 1 });
      console.log('‚úÖ √çndices de services criados');
      
    } catch (error) {
      console.error('‚ùå Erro ao criar √≠ndices:', error);
      throw error;
    }
  }

  async migrateData() {
    console.log('üì¶ Iniciando migra√ß√£o de dados...');
    
    try {
      const testDb = this.testConnection.db;
      const prodDb = this.productionConnection.db;
      
      // Verificar se j√° existem dados na produ√ß√£o
      const prodUserCount = await prodDb.collection('users').countDocuments();
      
      if (prodUserCount > 0) {
        console.log(`‚ÑπÔ∏è  Banco de produ√ß√£o j√° possui ${prodUserCount} usu√°rios`);
        const response = await this.askUserConfirmation('Deseja sobrescrever os dados existentes? (s/n): ');
        
        if (response.toLowerCase() !== 's') {
          console.log('‚è≠Ô∏è  Migra√ß√£o de dados cancelada pelo usu√°rio');
          return;
        }
      }
      
      // Cole√ß√µes para migrar
      const collections = ['users', 'appointments', 'services', 'reviews', 'notifications'];
      
      for (const collectionName of collections) {
        console.log(`üìã Migrando cole√ß√£o: ${collectionName}`);
        
        const testData = await testDb.collection(collectionName).find({}).toArray();
        
        if (testData.length > 0) {
          // Limpar cole√ß√£o de produ√ß√£o
          await prodDb.collection(collectionName).deleteMany({});
          
          // Inserir dados do teste
          await prodDb.collection(collectionName).insertMany(testData);
          console.log(`‚úÖ ${testData.length} documentos migrados para ${collectionName}`);
        } else {
          console.log(`‚ÑπÔ∏è  Nenhum documento encontrado em ${collectionName}`);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erro durante migra√ß√£o:', error);
      throw error;
    }
  }

  async askUserConfirmation(question) {
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    return new Promise((resolve) => {
      rl.question(question, (answer) => {
        rl.close();
        resolve(answer);
      });
    });
  }

  async validateProductionSetup() {
    console.log('üîç Validando configura√ß√£o de produ√ß√£o...');
    
    try {
      const db = this.productionConnection.db;
      
      // Verificar cole√ß√µes
      const collections = await db.listCollections().toArray();
      console.log(`üìä Cole√ß√µes encontradas: ${collections.map(c => c.name).join(', ')}`);
      
      // Contar documentos
      const userCount = await db.collection('users').countDocuments();
      const appointmentCount = await db.collection('appointments').countDocuments();
      const serviceCount = await db.collection('services').countDocuments();
      
      console.log(`üë• Usu√°rios: ${userCount}`);
      console.log(`üìÖ Agendamentos: ${appointmentCount}`);
      console.log(`üõ†Ô∏è  Servi√ßos: ${serviceCount}`);
      
      // Verificar √≠ndices
      const userIndexes = await db.collection('users').indexes();
      console.log(`üîç √çndices de users: ${userIndexes.length}`);
      
    } catch (error) {
      console.error('‚ùå Erro na valida√ß√£o:', error);
      throw error;
    }
  }

  async run() {
    console.log('üöÄ Configurando MongoDB Atlas para Produ√ß√£o');
    console.log('=' .repeat(50));
    
    try {
      // Conectar aos bancos
      await this.connectToProduction();
      await this.connectToTest();
      
      // Criar √≠ndices na produ√ß√£o
      await this.createProductionIndexes(this.productionConnection);
      
      // Migrar dados
      await this.migrateData();
      
      // Validar configura√ß√£o
      await this.validateProductionSetup();
      
      console.log('=' .repeat(50));
      console.log('üéâ Configura√ß√£o do MongoDB Atlas conclu√≠da!');
      console.log('‚úÖ Banco de produ√ß√£o \'bikefix\' est√° pronto');
      
    } catch (error) {
      console.error('=' .repeat(50));
      console.error('üí• Erro durante configura√ß√£o:', error);
      process.exit(1);
    } finally {
      if (this.productionConnection) {
        await this.productionConnection.close();
      }
      if (this.testConnection) {
        await this.testConnection.close();
      }
      console.log('üîå Conex√µes fechadas');
    }
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  const setup = new MongoDBAtlasSetup();
  setup.run();
}

module.exports = MongoDBAtlasSetup;